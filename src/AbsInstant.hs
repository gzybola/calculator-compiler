

module AbsInstant where

-- Haskell module generated by the BNF converter
newtype DiffList a = DiffList { getDiffList :: [a] -> [a] }

toDiffList :: [a] -> DiffList a
toDiffList xs = DiffList (xs++)

fromDiffList :: DiffList a -> [a]
fromDiffList (DiffList f) = f []

instance Monoid (DiffList a) where
    mempty = DiffList (\xs -> [] ++ xs)
instance Semigroup (DiffList a) where
    (DiffList f) <> (DiffList g) = DiffList (\xs -> f (g xs))

data Calculation = Add | Sub | Mul | Div

newtype Ident = Ident String deriving (Eq, Ord, Show, Read)
data Program = Prog [Stmt]
  deriving (Eq, Ord, Show, Read)

data Stmt = SAss Ident Exp | SExp Exp
  deriving (Eq, Ord, Show, Read)

data Exp
    = ExpAdd Exp Exp
    | ExpSub Exp Exp
    | ExpMul Exp Exp
    | ExpDiv Exp Exp
    | ExpLit Integer
    | ExpVar Ident
  deriving (Eq, Ord, Show, Read)

